import{S as e,i as t,s as n,j as a,m as o,o as r,v as s,r as i,w as c,e as h,t as d,k as l,c as p,a as g,g as v,d as _,n as u,b as m,f,E}from"../../chunks/vendor-4738865b.js";import{A as x}from"../../chunks/Article-5b3d48d3.js";import"../../chunks/thoughts-14334179.js";function I(e){let t,n,a,o,r,s,i,c,x,I,y,T,b,w,A,O,k,R,S,D,P,U,G,N,L,C,H,M,Y,$,j,B,W,V,q,z,F,J,K,Q,X,Z,ee,te,ne,ae,oe,re,se,ie,ce,he,de,le,pe,ge,ve,_e,ue,me,fe,Ee,xe,Ie,ye,Te,be,we,Ae,Oe,ke,Re,Se,De,Pe,Ue,Ge,Ne,Le,Ce,He,Me,Ye,$e,je,Be,We,Ve,qe,ze,Fe,Je,Ke,Qe,Xe,Ze,et,tt,nt,at,ot,rt,st,it,ct,ht,dt,lt,pt,gt,vt,_t,ut,mt,ft,Et,xt,It,yt,Tt,bt,wt,At,Ot,kt,Rt;return{c(){t=h("p"),n=d("I got a Raspberry Pi 4 for Christmas and I decided to setup a home server on it."),a=l(),o=h("p"),r=d("Contents"),s=l(),i=h("ul"),c=h("li"),x=h("a"),I=d("Setup"),y=l(),T=h("li"),b=h("a"),w=d("Reverse Proxy"),A=l(),O=h("li"),k=h("a"),R=d("Gitea"),S=l(),D=h("li"),P=h("a"),U=d("Nextcloud"),G=l(),N=h("li"),L=h("a"),C=d("Static hosting"),H=l(),M=h("li"),Y=h("a"),$=d("Matrix"),j=l(),B=h("li"),W=h("a"),V=d("Wrapping up"),q=l(),z=h("h2"),F=d("Setup"),J=l(),K=h("p"),Q=d("First I had to get everything setup. I started by installing Ubuntu 21.10 server on the pi. It\n\t\ttook a little bit to get working, mainly because I was attempting to ssh into the wrong computer\n\t\t(not the pi). Next I got docker installed, it might have already been installed, but I ended up\n\t\tinstalling it with "),X=h("code"),Z=d("snap"),ee=d(" which also installs "),te=h("code"),ne=d("docker-compose"),ae=l(),oe=h("h2"),re=d("Reverse Proxy"),se=l(),ie=h("p"),ce=d("Because I was gonna be serving multiple sites from the pi, I needed to use a reverse proxy to\n\t\tforward http requests based on the domain. I also wanted it to handle https so that each app\n\t\twould not need to."),he=l(),de=h("p"),le=d("I decided to use "),pe=h("code"),ge=h("a"),ve=d("nginxproxy/nginx-proxy"),_e=l(),ue=d(". It was pretty easy to setup. It basiclly allows you to add a environment variable to\n\t\tother containers called "),me=h("code"),fe=d("VIRTUAL_HOST"),Ee=d(" with the domain name and it handles all the nginx\n\t\tconfiguration. Below is my docker compose service for the reverse proxy."),xe=l(),Ie=h("pre"),ye=d('services:\n    nginx-proxy:\n    image: nginxproxy/nginx-proxy\n    labels:\n        - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\n    volumes:\n        - html:/usr/share/nginx/html\n        - certs:/etc/nginx/certs\n        - ./nginx/vhost:/etc/nginx/vhost.d\n        - /var/run/docker.sock:/tmp/docker.sock:ro\n    networks:\n        - proxy\n    ports:\n        - "80:80"\n        - "443:443"'),Te=l(),be=h("p"),we=d("I also created a network called "),Ae=h("code"),Oe=d("proxy"),ke=d(" and two volumes called "),Re=h("code"),Se=d("html"),De=d(" and\n\t\t"),Pe=h("code"),Ue=d("certs"),Ge=d(". I didn't use a volume to mount the "),Ne=h("code"),Le=d("vhost"),Ce=d(" because I needed to modify\n\t\tsome configuration for Nextcloud."),He=l(),Me=h("p"),Ye=d("That handles the reverse proxy part, but I also wanted it to handle https. Thankfully, they also\n\t\tcreated a companion container that allows you to specify "),$e=h("code"),je=d("LETSENCRYPT_HOST"),Be=d(" on any\n\t\tcontainer and obtains a let's encrypt certificate. Specificly I used their container\n\t\t"),We=h("code"),Ve=h("a"),qe=d("nginxproxy/acme-companion"),ze=d("\n\t\twith the following configuration."),Fe=l(),Je=h("pre"),Ke=d("services:\n    ...\n    acme_companion:\n        image: nginxproxy/acme-companion\n        volumes:\n            - html:/usr/share/nginx/html\n            - certs:/etc/nginx/certs\n            - ./nginx/vhost:/etc/nginx/vhost.d\n            - /var/run/docker.sock:/var/run/docker.sock:ro\n            - ./nginx/acme.sh:/etc/acme.sh\n        depends_on:\n            - nginx-proxy\n        environment:\n            - DEFAULT_EMAIL=[YOUR_EMAIL]"),Qe=l(),Xe=h("p"),Ze=d("With that I can specify "),et=h("code"),tt=d("VIRTUAL_HOST"),nt=d(" and "),at=h("code"),ot=d("LETSENCRYPT_HOST"),rt=d(" and have everything\n\t\tjust work!"),st=l(),it=h("h2"),ct=d("Gitea"),ht=l(),dt=h("p"),lt=d("Next I wanted to set up "),pt=h("a"),gt=d("Gitea"),vt=d(", an alternative to Github. This\n\t\twas very simple as they have a docker image that I used. Gitea also requires a database so I\n\t\talso setup a Postgres database using a docker image. Lastly, because Gitea and the database\n\t\tshould be on the same network but the database doesn't need to be on the proxy network I created\n\t\tanother network called "),_t=h("code"),ut=d("gitea"),mt=d(". The other slightly complex thing, which I will not\n\t\tcover here, as it is already documented\n\t\t"),ft=h("a"),Et=d("here"),xt=d(",\n\t\tis forwarding the ssh into the docker container."),It=l(),yt=h("p"),Tt=d("The configuration"),bt=l(),wt=h("pre"),At=d('networks:\n    ...\n    gitea:\n...\nservices:\n    ...\n    gitea:\n        image: gitea/gitea:1.15.8\n        environment:\n            - VIRTUAL_HOST=[YOUR_DOMAIN]\n            - LETSENCRYPT_HOST=[YOUR_DOMAIN]\n            - USER_UID=1001\n            - USER_GID=1001\n            - GITEA__database__DB_TYPE=postgres\n            - GITEA__database__HOST=gitea_db:5432\n            - GITEA__database__NAME=gitea\n            - GITEA__database__USER=gitea\n            - GITEA__database__PASSWD=[DB_PASSWORD]\n            - GITEA__server__DOMAIN=[YOUR_DOMAIN]\n            - GITEA__server__SSH_DOMAIN=[YOUR_DOMAIN]\n            - GITEA__server__HTTP_PORT=80\n            - GITEA__server__ROOT_URL=https://[YOUR_DOMAIN]\n        restart: always\n        networks:\n            - proxy\n            - gitea\n        volumes:\n            - ./gitea/data:/data\n            - /home/git/.ssh/:/data/git/.ssh\n            - /etc/timezone:/etc/timezone:ro\n            - /etc/localtime:/etc/localtime:ro\n        ports:\n            - "127.0.0.1:2222:22"\n        expose:\n            - "80"\n        depends_on:\n            - gitea_db'),Ot=l(),kt=h("h2"),Rt=d("Nextcloud"),this.h()},l(e){t=p(e,"P",{});var h=g(t);n=v(h,"I got a Raspberry Pi 4 for Christmas and I decided to setup a home server on it."),h.forEach(_),a=u(e),o=p(e,"P",{});var d=g(o);r=v(d,"Contents"),d.forEach(_),s=u(e),i=p(e,"UL",{});var l=g(i);c=p(l,"LI",{});var m=g(c);x=p(m,"A",{href:!0});var f=g(x);I=v(f,"Setup"),f.forEach(_),m.forEach(_),y=u(l),T=p(l,"LI",{});var E=g(T);b=p(E,"A",{href:!0});var St=g(b);w=v(St,"Reverse Proxy"),St.forEach(_),E.forEach(_),A=u(l),O=p(l,"LI",{});var Dt=g(O);k=p(Dt,"A",{href:!0});var Pt=g(k);R=v(Pt,"Gitea"),Pt.forEach(_),Dt.forEach(_),S=u(l),D=p(l,"LI",{});var Ut=g(D);P=p(Ut,"A",{href:!0});var Gt=g(P);U=v(Gt,"Nextcloud"),Gt.forEach(_),Ut.forEach(_),G=u(l),N=p(l,"LI",{});var Nt=g(N);L=p(Nt,"A",{href:!0});var Lt=g(L);C=v(Lt,"Static hosting"),Lt.forEach(_),Nt.forEach(_),H=u(l),M=p(l,"LI",{});var Ct=g(M);Y=p(Ct,"A",{href:!0});var Ht=g(Y);$=v(Ht,"Matrix"),Ht.forEach(_),Ct.forEach(_),j=u(l),B=p(l,"LI",{});var Mt=g(B);W=p(Mt,"A",{href:!0});var Yt=g(W);V=v(Yt,"Wrapping up"),Yt.forEach(_),Mt.forEach(_),l.forEach(_),q=u(e),z=p(e,"H2",{id:!0});var $t=g(z);F=v($t,"Setup"),$t.forEach(_),J=u(e),K=p(e,"P",{});var jt=g(K);Q=v(jt,"First I had to get everything setup. I started by installing Ubuntu 21.10 server on the pi. It\n\t\ttook a little bit to get working, mainly because I was attempting to ssh into the wrong computer\n\t\t(not the pi). Next I got docker installed, it might have already been installed, but I ended up\n\t\tinstalling it with "),X=p(jt,"CODE",{});var Bt=g(X);Z=v(Bt,"snap"),Bt.forEach(_),ee=v(jt," which also installs "),te=p(jt,"CODE",{});var Wt=g(te);ne=v(Wt,"docker-compose"),Wt.forEach(_),jt.forEach(_),ae=u(e),oe=p(e,"H2",{id:!0});var Vt=g(oe);re=v(Vt,"Reverse Proxy"),Vt.forEach(_),se=u(e),ie=p(e,"P",{});var qt=g(ie);ce=v(qt,"Because I was gonna be serving multiple sites from the pi, I needed to use a reverse proxy to\n\t\tforward http requests based on the domain. I also wanted it to handle https so that each app\n\t\twould not need to."),qt.forEach(_),he=u(e),de=p(e,"P",{});var zt=g(de);le=v(zt,"I decided to use "),pe=p(zt,"CODE",{});var Ft=g(pe);ge=p(Ft,"A",{href:!0});var Jt=g(ge);ve=v(Jt,"nginxproxy/nginx-proxy"),Jt.forEach(_),_e=u(Ft),Ft.forEach(_),ue=v(zt,". It was pretty easy to setup. It basiclly allows you to add a environment variable to\n\t\tother containers called "),me=p(zt,"CODE",{});var Kt=g(me);fe=v(Kt,"VIRTUAL_HOST"),Kt.forEach(_),Ee=v(zt," with the domain name and it handles all the nginx\n\t\tconfiguration. Below is my docker compose service for the reverse proxy."),zt.forEach(_),xe=u(e),Ie=p(e,"PRE",{});var Qt=g(Ie);ye=v(Qt,'services:\n    nginx-proxy:\n    image: nginxproxy/nginx-proxy\n    labels:\n        - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\n    volumes:\n        - html:/usr/share/nginx/html\n        - certs:/etc/nginx/certs\n        - ./nginx/vhost:/etc/nginx/vhost.d\n        - /var/run/docker.sock:/tmp/docker.sock:ro\n    networks:\n        - proxy\n    ports:\n        - "80:80"\n        - "443:443"'),Qt.forEach(_),Te=u(e),be=p(e,"P",{});var Xt=g(be);we=v(Xt,"I also created a network called "),Ae=p(Xt,"CODE",{});var Zt=g(Ae);Oe=v(Zt,"proxy"),Zt.forEach(_),ke=v(Xt," and two volumes called "),Re=p(Xt,"CODE",{});var en=g(Re);Se=v(en,"html"),en.forEach(_),De=v(Xt," and\n\t\t"),Pe=p(Xt,"CODE",{});var tn=g(Pe);Ue=v(tn,"certs"),tn.forEach(_),Ge=v(Xt,". I didn't use a volume to mount the "),Ne=p(Xt,"CODE",{});var nn=g(Ne);Le=v(nn,"vhost"),nn.forEach(_),Ce=v(Xt," because I needed to modify\n\t\tsome configuration for Nextcloud."),Xt.forEach(_),He=u(e),Me=p(e,"P",{});var an=g(Me);Ye=v(an,"That handles the reverse proxy part, but I also wanted it to handle https. Thankfully, they also\n\t\tcreated a companion container that allows you to specify "),$e=p(an,"CODE",{});var on=g($e);je=v(on,"LETSENCRYPT_HOST"),on.forEach(_),Be=v(an," on any\n\t\tcontainer and obtains a let's encrypt certificate. Specificly I used their container\n\t\t"),We=p(an,"CODE",{});var rn=g(We);Ve=p(rn,"A",{href:!0});var sn=g(Ve);qe=v(sn,"nginxproxy/acme-companion"),sn.forEach(_),rn.forEach(_),ze=v(an,"\n\t\twith the following configuration."),an.forEach(_),Fe=u(e),Je=p(e,"PRE",{});var cn=g(Je);Ke=v(cn,"services:\n    ...\n    acme_companion:\n        image: nginxproxy/acme-companion\n        volumes:\n            - html:/usr/share/nginx/html\n            - certs:/etc/nginx/certs\n            - ./nginx/vhost:/etc/nginx/vhost.d\n            - /var/run/docker.sock:/var/run/docker.sock:ro\n            - ./nginx/acme.sh:/etc/acme.sh\n        depends_on:\n            - nginx-proxy\n        environment:\n            - DEFAULT_EMAIL=[YOUR_EMAIL]"),cn.forEach(_),Qe=u(e),Xe=p(e,"P",{});var hn=g(Xe);Ze=v(hn,"With that I can specify "),et=p(hn,"CODE",{});var dn=g(et);tt=v(dn,"VIRTUAL_HOST"),dn.forEach(_),nt=v(hn," and "),at=p(hn,"CODE",{});var ln=g(at);ot=v(ln,"LETSENCRYPT_HOST"),ln.forEach(_),rt=v(hn," and have everything\n\t\tjust work!"),hn.forEach(_),st=u(e),it=p(e,"H2",{id:!0});var pn=g(it);ct=v(pn,"Gitea"),pn.forEach(_),ht=u(e),dt=p(e,"P",{});var gn=g(dt);lt=v(gn,"Next I wanted to set up "),pt=p(gn,"A",{href:!0});var vn=g(pt);gt=v(vn,"Gitea"),vn.forEach(_),vt=v(gn,", an alternative to Github. This\n\t\twas very simple as they have a docker image that I used. Gitea also requires a database so I\n\t\talso setup a Postgres database using a docker image. Lastly, because Gitea and the database\n\t\tshould be on the same network but the database doesn't need to be on the proxy network I created\n\t\tanother network called "),_t=p(gn,"CODE",{});var _n=g(_t);ut=v(_n,"gitea"),_n.forEach(_),mt=v(gn,". The other slightly complex thing, which I will not\n\t\tcover here, as it is already documented\n\t\t"),ft=p(gn,"A",{href:!0});var un=g(ft);Et=v(un,"here"),un.forEach(_),xt=v(gn,",\n\t\tis forwarding the ssh into the docker container."),gn.forEach(_),It=u(e),yt=p(e,"P",{});var mn=g(yt);Tt=v(mn,"The configuration"),mn.forEach(_),bt=u(e),wt=p(e,"PRE",{});var fn=g(wt);At=v(fn,'networks:\n    ...\n    gitea:\n...\nservices:\n    ...\n    gitea:\n        image: gitea/gitea:1.15.8\n        environment:\n            - VIRTUAL_HOST=[YOUR_DOMAIN]\n            - LETSENCRYPT_HOST=[YOUR_DOMAIN]\n            - USER_UID=1001\n            - USER_GID=1001\n            - GITEA__database__DB_TYPE=postgres\n            - GITEA__database__HOST=gitea_db:5432\n            - GITEA__database__NAME=gitea\n            - GITEA__database__USER=gitea\n            - GITEA__database__PASSWD=[DB_PASSWORD]\n            - GITEA__server__DOMAIN=[YOUR_DOMAIN]\n            - GITEA__server__SSH_DOMAIN=[YOUR_DOMAIN]\n            - GITEA__server__HTTP_PORT=80\n            - GITEA__server__ROOT_URL=https://[YOUR_DOMAIN]\n        restart: always\n        networks:\n            - proxy\n            - gitea\n        volumes:\n            - ./gitea/data:/data\n            - /home/git/.ssh/:/data/git/.ssh\n            - /etc/timezone:/etc/timezone:ro\n            - /etc/localtime:/etc/localtime:ro\n        ports:\n            - "127.0.0.1:2222:22"\n        expose:\n            - "80"\n        depends_on:\n            - gitea_db'),fn.forEach(_),Ot=u(e),kt=p(e,"H2",{id:!0});var En=g(kt);Rt=v(En,"Nextcloud"),En.forEach(_),this.h()},h(){m(x,"href","#setup"),m(b,"href","#reverse_proxy"),m(k,"href","#gitea"),m(P,"href","#nextcloud"),m(L,"href","#static_hosting"),m(Y,"href","#matrix"),m(W,"href","#wrapping_up"),m(z,"id","setup"),m(oe,"id","reverse_proxy"),m(ge,"href","https://github.com/nginx-proxy/nginx-proxy"),m(Ve,"href","https://github.com/nginx-proxy/acme-companion"),m(it,"id","gitea"),m(pt,"href","https://gitea.com/"),m(ft,"href","https://docs.gitea.io/en-us/install-with-docker/#ssh-container-passthrough"),m(kt,"id","nextcloud")},m(e,h){f(e,t,h),E(t,n),f(e,a,h),f(e,o,h),E(o,r),f(e,s,h),f(e,i,h),E(i,c),E(c,x),E(x,I),E(i,y),E(i,T),E(T,b),E(b,w),E(i,A),E(i,O),E(O,k),E(k,R),E(i,S),E(i,D),E(D,P),E(P,U),E(i,G),E(i,N),E(N,L),E(L,C),E(i,H),E(i,M),E(M,Y),E(Y,$),E(i,j),E(i,B),E(B,W),E(W,V),f(e,q,h),f(e,z,h),E(z,F),f(e,J,h),f(e,K,h),E(K,Q),E(K,X),E(X,Z),E(K,ee),E(K,te),E(te,ne),f(e,ae,h),f(e,oe,h),E(oe,re),f(e,se,h),f(e,ie,h),E(ie,ce),f(e,he,h),f(e,de,h),E(de,le),E(de,pe),E(pe,ge),E(ge,ve),E(pe,_e),E(de,ue),E(de,me),E(me,fe),E(de,Ee),f(e,xe,h),f(e,Ie,h),E(Ie,ye),f(e,Te,h),f(e,be,h),E(be,we),E(be,Ae),E(Ae,Oe),E(be,ke),E(be,Re),E(Re,Se),E(be,De),E(be,Pe),E(Pe,Ue),E(be,Ge),E(be,Ne),E(Ne,Le),E(be,Ce),f(e,He,h),f(e,Me,h),E(Me,Ye),E(Me,$e),E($e,je),E(Me,Be),E(Me,We),E(We,Ve),E(Ve,qe),E(Me,ze),f(e,Fe,h),f(e,Je,h),E(Je,Ke),f(e,Qe,h),f(e,Xe,h),E(Xe,Ze),E(Xe,et),E(et,tt),E(Xe,nt),E(Xe,at),E(at,ot),E(Xe,rt),f(e,st,h),f(e,it,h),E(it,ct),f(e,ht,h),f(e,dt,h),E(dt,lt),E(dt,pt),E(pt,gt),E(dt,vt),E(dt,_t),E(_t,ut),E(dt,mt),E(dt,ft),E(ft,Et),E(dt,xt),f(e,It,h),f(e,yt,h),E(yt,Tt),f(e,bt,h),f(e,wt,h),E(wt,At),f(e,Ot,h),f(e,kt,h),E(kt,Rt)},d(e){e&&_(t),e&&_(a),e&&_(o),e&&_(s),e&&_(i),e&&_(q),e&&_(z),e&&_(J),e&&_(K),e&&_(ae),e&&_(oe),e&&_(se),e&&_(ie),e&&_(he),e&&_(de),e&&_(xe),e&&_(Ie),e&&_(Te),e&&_(be),e&&_(He),e&&_(Me),e&&_(Fe),e&&_(Je),e&&_(Qe),e&&_(Xe),e&&_(st),e&&_(it),e&&_(ht),e&&_(dt),e&&_(It),e&&_(yt),e&&_(bt),e&&_(wt),e&&_(Ot),e&&_(kt)}}}function y(e){let t,n;return t=new x({props:{id:"4",$$slots:{default:[I]},$$scope:{ctx:e}}}),{c(){a(t.$$.fragment)},l(e){o(t.$$.fragment,e)},m(e,a){r(t,e,a),n=!0},p(e,[n]){const a={};1&n&&(a.$$scope={dirty:n,ctx:e}),t.$set(a)},i(e){n||(s(t.$$.fragment,e),n=!0)},o(e){i(t.$$.fragment,e),n=!1},d(e){c(t,e)}}}export default class extends e{constructor(e){super(),t(this,e,null,y,n,{})}}
